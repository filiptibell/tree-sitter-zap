==================
Empty declarations
==================

type Empty1 = struct {}
type Empty2 = enum {}
type Empty3 = set { string }
type Empty4 = map { [string]: u32 }

---

(source_file
  (type_declaration
    name: (identifier)
    value: (type
      (struct_type)))
  (type_declaration
    name: (identifier)
    value: (type
      (enum_type)))
  (type_declaration
    name: (identifier)
    value: (type
      (set_type
        type: (type
          (primitive_type)))))
  (type_declaration
    name: (identifier)
    value: (type
      (map_type
        key_type: (type
          (primitive_type))
        value_type: (type
          (primitive_type))))))

==================
Optional fields
==================

type ComplexOptionals = struct {
    maybe_string: string?,
    maybe_number: u32[0..100]?,
    maybe_vector: Vector3?,
    maybe_enum: enum { A, B }?
}

---

(source_file
  (type_declaration
    name: (identifier)
    value: (type
      (struct_type
        properties: (property
          name: (identifier)
          type: (type
            (optional_type
              type: (type
                (primitive_type)))))
        properties: (property
          name: (identifier)
          type: (type
            (optional_type
              type: (type
                (primitive_type)
                (array
                  (array_inexact
                    (number)
                    (number)))))))
        properties: (property
          name: (identifier)
          type: (type
            (optional_type
              type: (type
                (primitive_type)))))
        properties: (property
          name: (identifier)
          type: (type
            (optional_type
              type: (type
                (enum_type
                  (enum_variant
                    (identifier))
                  (enum_variant
                    (identifier)))))))))))

==================
Deep nesting
==================

type DeepMap = map {
    [string]: map {
        [u32]: map {
            [string]: Vector3
        }
    }
}

type DeepStruct = struct {
    outer: struct {
        middle: struct {
            inner: struct {
                value: string
            }
        }
    }
}

---

(source_file
  (type_declaration
    name: (identifier)
    value: (type
      (map_type
        key_type: (type
          (primitive_type))
        value_type: (type
          (map_type
            key_type: (type
              (primitive_type))
            value_type: (type
              (map_type
                key_type: (type
                  (primitive_type))
                value_type: (type
                  (primitive_type)))))))))
  (type_declaration
    name: (identifier)
    value: (type
      (struct_type
        properties: (property
          name: (identifier)
          type: (type
            (struct_type
              properties: (property
                name: (identifier)
                type: (type
                  (struct_type
                    properties: (property
                      name: (identifier)
                      type: (type
                        (struct_type
                          properties: (property
                            name: (identifier)
                            type: (type
                              (primitive_type))))))))))))))))

==================
Mixed everything
==================

type Kitchen = map {
    [string(1..20)]: struct {
        items: set { enum {
            Pan,
            Pot,
            Plate
        } },
        temperature: u32[0..500]?,
        metadata: map {
            [string]: enum "type" {
                Number { value: f64 },
                Text { value: string(0..100) }
            }
        }
    }
}

---

(source_file
  (type_declaration
    name: (identifier)
    value: (type
      (map_type
        key_type: (type
          (primitive_type)
          (range
            (range_inexact
              (number)
              (number))))
        value_type: (type
          (struct_type
            properties: (property
              name: (identifier)
              type: (type
                (set_type
                  type: (type
                    (enum_type
                      (enum_variant
                        (identifier))
                      (enum_variant
                        (identifier))
                      (enum_variant
                        (identifier)))))))
            properties: (property
              name: (identifier)
              type: (type
                (optional_type
                  type: (type
                    (primitive_type)
                    (array
                      (array_inexact
                  (number)
                  (number)))))))
            properties: (property
              name: (identifier)
              type: (type
                (map_type
                  key_type: (type
                    (primitive_type))
                  value_type: (type
                    (enum_type
                      tag: (string)
                      (enum_variant
                        (identifier)
                        properties: (property
                          name: (identifier)
                          type: (type
                            (primitive_type))))
                      (enum_variant
                        (identifier)
                        properties: (property
                          name: (identifier)
                          type: (type
                            (primitive_type)
                            (range
                              (range_inexact
                                (number)
                                (number)))))))))))))))))
