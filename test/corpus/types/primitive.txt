==================
Basic primitives
==================

type MyString = string
type MyBool = boolean
type MyFloat = f64
type MyInt = i32
type MyUInt = u32

---

(source_file
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type)))
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type)))
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type)))
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type)))
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type))))

==================
Roblox types
==================

type Position = Vector3
type Transform = CFrame
type AlignedTransform = AlignedCFrame
type Screen = Vector2
type Time = DateTime
type PreciseTime = DateTimeMillis
type Paint = Color3
type Block = BrickColor
type AnyInstance = Instance
type PlayerInstance = Instance(Player)
type PlayerInstanceSpaced = Instance (Player)

---

(source_file
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type)))
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type)))
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type)))
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type)))
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type)))
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type)))
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type)))
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type)))
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type)))
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type)
      (range
        (range_ident
          (identifier)))))
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type)
      (range
        (range_ident
          (identifier))))))

==================
Range constraints
==================

type SmallString = string(0..10)    -- Between 0 and 10
type LongString = string(20..100)   -- Between 20 and 100
type OpenString = string(10..)      -- At least 10
type MaxString = string(..50)       -- At most 50
type ExactString = string(30)       -- Exactly 30

---

(source_file
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type)
      (range
        (range_inexact
          (number)
          (number)))))
  (comment)
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type)
      (range
        (range_inexact
          (number)
          (number)))))
  (comment)
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type)
      (range
        (range_inexact
          (number)))))
  (comment)
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type)
      (range
        (range_inexact
          (number)))))
  (comment)
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type)
      (range
        (range_exact
          (number)))))
  (comment))

==================
Array constraints
==================

type SmallNumber = u32[0..10]      -- Between 0 and 10 values, inclusive
type BigNumber = u32[100..]        -- 100 or more values
type MaxNumber = u32[..50]         -- Up to 50 values
type ExactNumber = u32[30]         -- Exactly 30 values

---

(source_file
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type)
      (array
        (array_inexact
          (number)
          (number)))))
  (comment)
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type)
      (array
        (array_inexact
          (number)))))
  (comment)
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type)
      (array
        (array_inexact
          (number)))))
  (comment)
  (type_declaration
    name: (identifier)
    value: (type
      (primitive_type)
      (array
        (array_exact
          (number)))))
  (comment))
